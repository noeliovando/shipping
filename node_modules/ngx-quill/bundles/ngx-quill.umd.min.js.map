{"version":3,"sources":["ng://ngx-quill/src/quill-defaults.ts","ng://ngx-quill/src/quill-editor.interfaces.ts","ng://ngx-quill/src/quill-editor.component.ts","ng://ngx-quill/src/quill.module.ts"],"names":["defaultModules","toolbar","header","list","script","indent","direction","size","color","background","font","align","QUILL_CONFIG_TOKEN","InjectionToken","Quill","QuillEditorComponent","elementRef","domSanitizer","doc","platformId","renderer","zone","config","_this","this","format","required","customToolbarPosition","sanitize","style","strict","customOptions","onEditorCreated","EventEmitter","onContentChanged","onSelectionChanged","disabled","valueGetter","quillEditor","editorElement","html","querySelector","innerHTML","modelValue","getText","getContents","JSON","stringify","e","valueSetter","value","SecurityContext","HTML","clipboard","convert","parse","insert","selectionChangeHandler","range","oldRange","source","run","emit","editor","onModelTouched","textChangeHandler","delta","oldDelta","text","content","trackChanges","sources","USER","onModelChange","prototype","_modelValue","ngAfterViewInit","isPlatformServer","require","nativeElement","insertAdjacentHTML","editorElem","toolbarElem","modules","undefined","placeholder","Object","keys","forEach","key","setStyle","customOption","newCustomOption","import","whitelist","register","bounds","body","debug","readOnly","scrollingContainer","formats","theme","setContents","setText","contents","history","clear","setDisabledState","on","ngOnDestroy","off","ngOnChanges","changes","enable","currentValue","root","dataset","currentStyling","previousStyling","previousValue","removeStyle","writeValue","isDisabled","disable","setAttribute","removeAttribute","registerOnChange","fn","registerOnTouched","validate","err","valid","textLength","trim","length","minLength","minLengthError","given","maxLength","maxLengthError","requiredError","empty","Component","args","encapsulation","ViewEncapsulation","None","providers","multi","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","selector","template","ElementRef","DomSanitizer","Inject","DOCUMENT","decorators","type","PLATFORM_ID","Renderer2","NgZone","Input","Output","Éµ0","QuillModule","forRoot","ngModule","useValue","NgModule","declarations","exports","imports"],"mappings":"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","sourcesContent":["export const defaultModules = {\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strike'], // toggled buttons\n    ['blockquote', 'code-block'],\n\n    [{ header: 1 }, { header: 2 }], // custom button values\n    [{ list: 'ordered' }, { list: 'bullet' }],\n    [{ script: 'sub' }, { script: 'super' }], // superscript/subscript\n    [{ indent: '-1' }, { indent: '+1' }], // outdent/indent\n    [{ direction: 'rtl' }], // text direction\n\n    [{ size: ['small', false, 'large', 'huge'] }], // custom dropdown\n    [{ header: [1, 2, 3, 4, 5, 6, false] }],\n\n    [\n      { color: [] },\n      { background: [] }\n    ], // dropdown with defaults from theme\n    [{ font: [] }],\n    [{ align: [] }],\n\n    ['clean'], // remove formatting button\n\n    ['link', 'image', 'video'] // link and image, video\n  ]\n}\n","import { InjectionToken } from '@angular/core'\n\nexport type QuillToolbarConfig = Array<Array<\n  string | {\n    indent?: string\n    list?: string\n    direction?: string\n    header?: number | Array<boolean | number>\n    color?: string[]\n    background?: string[]\n    align?: string[]\n    script?: string\n    font?: string[]\n    size?: Array<boolean | string>\n  }\n>>\n\nexport interface QuillModules {\n  [key: string]: any\n  clipboard?: {\n    mathers?: any[]\n    matchVisual?: boolean\n  } |ÃÂ boolean\n  history?: {\n    delay?: number\n    maxStack?: number\n    userOnly?: boolean\n  } |ÃÂ boolean\n  keyboard?: {\n    bindings?: any\n  } | boolean\n  syntax?: boolean\n  toolbar?: QuillToolbarConfig |ÃÂ string |ÃÂ {\n    container?: string | string[] | QuillToolbarConfig\n    handlers?: {\n      [key: string]: any\n    }\n  } |ÃÂ boolean\n}\n\nexport interface QuillConfig {\n  bounds?: HTMLElement |ÃÂ string\n  debug?: 'error' | 'warn' | 'log' |ÃÂ false\n  formats?: any\n  modules?: QuillModules\n  placeholder?: string\n  readOnly?: boolean\n  scrollingContainer?: HTMLElement |ÃÂ string |ÃÂ null\n  theme?: string\n  // Custom Config to track all changes or only changes by 'user'\n  trackChanges?: 'user' | 'all'\n}\n\nexport const QUILL_CONFIG_TOKEN = new InjectionToken<QuillConfig>('config')\n","import { isPlatformServer } from '@angular/common'\nimport { DomSanitizer } from '@angular/platform-browser'\n\nimport { QUILL_CONFIG_TOKEN, QuillConfig, QuillModules } from './quill-editor.interfaces'\n\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  PLATFORM_ID,\n  Renderer2,\n  SecurityContext,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core'\n\nimport {\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  Validator\n} from '@angular/forms'\n\nimport { DOCUMENT } from '@angular/common'\nimport { defaultModules } from './quill-defaults'\n\n// Because quill uses `document` directly, we cannot `import` during SSR\n// instead, we load dynamically via `require('quill')` in `ngAfterViewInit()`\ndeclare var require: any\n// tslint:disable-next-line:variable-name\nlet Quill: any = null\n\nexport interface CustomOption {\n  import: string\n  whitelist: any[]\n}\n\nexport interface Range {\n  index: number\n  length: number\n}\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => QuillEditorComponent)\n    },\n    {\n      multi: true,\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => QuillEditorComponent)\n    }\n  ],\n  selector: 'quill-editor',\n  template: `\n  <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n`\n})\nexport class QuillEditorComponent\n  implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {\n\n  quillEditor: any\n  editorElem: HTMLElement | undefined\n  content: any\n\n  @Input() format?: 'object' | 'html' | 'text' | 'json' = 'html'\n  @Input() theme?: string\n  @Input() modules?: QuillModules\n  @Input() debug?: 'warn' |ÃÂ 'log' |ÃÂ 'error' |ÃÂ false\n  @Input() readOnly?: boolean\n  @Input() placeholder?: string\n  @Input() maxLength?: number\n  @Input() minLength?: number\n  @Input() required: boolean = false\n  @Input() formats?: string[] |ÃÂ null\n  @Input() customToolbarPosition: 'top' |ÃÂ 'bottom' = 'top'\n  @Input() sanitize: boolean = false\n  @Input() style: any = null\n  @Input() strict: boolean = true\n  @Input() scrollingContainer?: HTMLElement | string | null\n  @Input() bounds?: HTMLElement | string\n  @Input() customOptions: CustomOption[] = []\n  @Input() trackChanges?: 'user' |ÃÂ 'all'\n\n  @Output() onEditorCreated: EventEmitter<any> = new EventEmitter()\n  @Output() onContentChanged: EventEmitter<{\n    content: any\n    delta: any\n    editor: any\n    html: string | null\n    oldDelta: any\n    source: string\n    text: string\n  }> = new EventEmitter()\n  @Output() onSelectionChanged: EventEmitter<{\n    editor: any\n    oldRange: Range | null\n    range: Range |ÃÂ null\n    source: string\n  }> = new EventEmitter()\n\n  private disabled = false // used to store initial value before ViewInit\n\n  constructor(\n    private elementRef: ElementRef,\n    private domSanitizer: DomSanitizer,\n    @Inject(DOCUMENT) private doc: any,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private renderer: Renderer2,\n    private zone: NgZone,\n    @Inject(QUILL_CONFIG_TOKEN) private config: QuillConfig\n  ) {}\n\n  // tslint:disable-next-line:no-empty\n  onModelChange(_modelValue?: any) {}\n  // tslint:disable-next-line:no-empty\n  onModelTouched() {}\n\n  @Input()\n  valueGetter = (quillEditor: any, editorElement: HTMLElement): string | anyÃÂ  => {\n    let html: string | null = editorElement.querySelector('.ql-editor')!.innerHTML\n    if (html === '<p><br></p>' || html === '<div><br><div>') {\n      html = null\n    }\n    let modelValue = html\n\n    if (this.format === 'text') {\n      modelValue = quillEditor.getText()\n    } else if (this.format === 'object') {\n      modelValue = quillEditor.getContents()\n    } else if (this.format === 'json') {\n      try {\n        modelValue = JSON.stringify(quillEditor.getContents())\n      } catch (e) {\n        modelValue = quillEditor.getText()\n      }\n    }\n\n    return modelValue\n  }\n\n  @Input()\n  valueSetter = (quillEditor: any, value: any): any => {\n    if (this.format === 'html') {\n      if (this.sanitize) {\n        value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n      }\n      return quillEditor.clipboard.convert(value)\n    } else if (this.format === 'json') {\n      try {\n        return JSON.parse(value)\n      } catch (e) {\n        return [{ insert: value }]\n      }\n    }\n\n    return value\n  }\n\n  ngAfterViewInit() {\n    if (isPlatformServer(this.platformId)) {\n      return\n    }\n    if (!Quill) {\n      Quill = require('quill')\n    }\n\n    if (this.customToolbarPosition === 'top') {\n      this.elementRef.nativeElement.insertAdjacentHTML(\n        'beforeend',\n        '<div quill-editor-element></div>'\n      )\n    } else {\n      this.elementRef.nativeElement.insertAdjacentHTML(\n        'afterbegin',\n        '<div quill-editor-element></div>'\n      )\n    }\n    this.editorElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-element]'\n    )\n\n    const toolbarElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-toolbar]'\n    )\n    const modules = this.modules || (this.config.modules ||ÃÂ defaultModules)\n    if (modules.toolbar === undefined) {\n      modules.toolbar = defaultModules.toolbar\n    }\n\n    let placeholder = this.placeholder !== undefined ? this.placeholder : this.config.placeholder\n    if (placeholder === undefined) {\n      placeholder = 'Insert text here ...'\n    }\n\n    if (toolbarElem) {\n      // tslint:disable-next-line:no-string-literal\n      modules['toolbar'] = toolbarElem\n    }\n\n    if (this.style) {\n      Object.keys(this.style).forEach((key: string) => {\n        this.renderer.setStyle(this.editorElem, key, this.style[key])\n      })\n    }\n\n    this.customOptions.forEach((customOption) => {\n      const newCustomOption = Quill.import(customOption.import)\n      newCustomOption.whitelist = customOption.whitelist\n      Quill.register(newCustomOption, true)\n    })\n\n    let bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds\n    if (!bounds) {\n      bounds = this.config.bounds ? this.config.bounds : this.doc.body\n    }\n\n    let debug = this.debug\n    if (!debug && debug !== false && this.config.debug) {\n      debug = this.config.debug\n    }\n\n    let readOnly = this.readOnly\n    if (!readOnly && this.readOnly !== false) {\n      readOnly = this.config.readOnly !== undefined ? this.config.readOnly : false\n    }\n\n    let scrollingContainer = this.scrollingContainer\n    if (!scrollingContainer && this.scrollingContainer !== null) {\n      scrollingContainer = this.config.scrollingContainer === null ||ÃÂ this.config.scrollingContainer ? this.config.scrollingContainer : null\n    }\n\n    let formats = this.formats\n    if (!formats && formats === undefined) {\n      formats = this.config.formats ||ÃÂ this.config.formats === null ? this.config.formats : undefined\n    }\n\n    this.quillEditor = new Quill(this.editorElem, {\n      bounds,\n      debug,\n      formats,\n      modules,\n      placeholder,\n      readOnly,\n      scrollingContainer,\n      strict: this.strict,\n      theme: this.theme || (this.config.theme ? this.config.theme : 'snow')\n    })\n\n    if (this.content) {\n      if (this.format === 'object') {\n        this.quillEditor.setContents(this.content, 'silent')\n      } else if (this.format === 'text') {\n        this.quillEditor.setText(this.content, 'silent')\n      } else if (this.format === 'json') {\n        try {\n          this.quillEditor.setContents(JSON.parse(this.content), 'silent')\n        } catch (e) {\n          this.quillEditor.setText(this.content, 'silent')\n        }\n      } else {\n        if (this.sanitize) {\n          this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content)\n        }\n        const contents = this.quillEditor.clipboard.convert(this.content)\n        this.quillEditor.setContents(contents, 'silent')\n      }\n\n      this.quillEditor.history.clear()\n    }\n\n    // initialize disabled status based on this.disabled as default value\n    this.setDisabledState()\n\n    this.onEditorCreated.emit(this.quillEditor)\n\n    // mark model as touched if editor lost focus\n    this.quillEditor.on(\n      'selection-change',\n      this.selectionChangeHandler\n    )\n\n    // update model if text changes\n    this.quillEditor.on(\n      'text-change',\n      this.textChangeHandler\n    )\n  }\n\n  selectionChangeHandler = (range: Range |ÃÂ null, oldRange: Range | null, source: string) => {\n    this.zone.run(() => {\n      this.onSelectionChanged.emit({\n        editor: this.quillEditor,\n        oldRange,\n        range,\n        source\n      })\n\n      if (!range && this.onModelTouched) {\n        this.onModelTouched()\n      }\n    })\n  }\n\n  textChangeHandler = (delta: any, oldDelta: any, source: string): void => {\n    // only emit changes emitted by user interactions\n\n    const text = this.quillEditor.getText()\n    const content = this.quillEditor.getContents()\n\n    let html: string | null = this.editorElem!.querySelector('.ql-editor')!.innerHTML\n    if (html === '<p><br></p>' || html === '<div><br><div>') {\n      html = null\n    }\n\n    this.zone.run(() => {\n      const trackChanges = this.trackChanges ||ÃÂ this.config.trackChanges\n      if ((source === Quill.sources.USER || trackChanges && trackChanges === 'all') && this.onModelChange) {\n        this.onModelChange(\n          this.valueGetter(this.quillEditor, this.editorElem!)\n        )\n      }\n\n      this.onContentChanged.emit({\n        content,\n        delta,\n        editor: this.quillEditor,\n        html,\n        oldDelta,\n        source,\n        text\n      })\n    })\n  }\n\n  ngOnDestroy() {\n    if (this.quillEditor) {\n      this.quillEditor.off('selection-change', this.selectionChangeHandler)\n      this.quillEditor.off('text-change', this.textChangeHandler)\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.quillEditor) {\n      return\n    }\n    // tslint:disable:no-string-literal\n    if (changes['readOnly']) {\n      this.quillEditor.enable(!changes['readOnly'].currentValue)\n    }\n    if (changes['placeholder']) {\n      this.quillEditor.root.dataset.placeholder =\n        changes['placeholder'].currentValue\n    }\n    if (changes['style']) {\n      const currentStyling = changes['style'].currentValue\n      const previousStyling = changes['style'].previousValue\n\n      if (previousStyling) {\n        Object.keys(previousStyling).forEach((key: string) => {\n          this.renderer.removeStyle(this.editorElem, key)\n        })\n      }\n      if (currentStyling) {\n        Object.keys(currentStyling).forEach((key: string) => {\n          this.renderer.setStyle(this.editorElem, key, this.style[key])\n        })\n      }\n    }\n    // tslint:enable:no-string-literal\n  }\n\n  writeValue(currentValue: any) {\n    this.content = currentValue\n\n    if (this.quillEditor) {\n      if (currentValue) {\n        if (this.format === 'text') {\n          this.quillEditor.setText(currentValue)\n        } else {\n          this.quillEditor.setContents(\n            this.valueSetter(this.quillEditor, this.content)\n          )\n        }\n        return\n      }\n      this.quillEditor.setText('')\n    }\n  }\n\n  setDisabledState(isDisabled: boolean = this.disabled): void {\n    // store initial value to set appropriate disabled status after ViewInit\n    this.disabled = isDisabled\n    if (this.quillEditor) {\n      if (isDisabled) {\n        this.quillEditor.disable()\n        this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled')\n      } else {\n        if (!this.readOnly) {\n          this.quillEditor.enable()\n        }\n        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled')\n      }\n    }\n  }\n\n  registerOnChange(fn: (modelValue: any) => void): void {\n    this.onModelChange = fn\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onModelTouched = fn\n  }\n\n  validate() {\n    if (!this.quillEditor) {\n      return null\n    }\n\n    const err: {\n      minLengthError?: {\n        given: number\n        minLength: number\n      }\n      maxLengthError?: {\n        given: number\n        maxLength: number\n      }\n      requiredError?: { empty: boolean }\n    } = {}\n    let valid = true\n\n    const textLength = this.quillEditor.getText().trim().length\n\n    if (this.minLength && textLength && textLength < this.minLength) {\n      err.minLengthError = {\n        given: textLength,\n        minLength: this.minLength\n      }\n\n      valid = false\n    }\n\n    if (this.maxLength && textLength > this.maxLength) {\n      err.maxLengthError = {\n        given: textLength,\n        maxLength: this.maxLength\n      }\n\n      valid = false\n    }\n\n    if (this.required && !textLength) {\n      err.requiredError = {\n        empty: true\n      }\n\n      valid = false\n    }\n\n    return valid ? null : err\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core'\n\nimport { defaultModules } from './quill-defaults'\nimport { QuillEditorComponent } from './quill-editor.component'\nimport { QUILL_CONFIG_TOKEN, QuillConfig } from './quill-editor.interfaces'\n\n@NgModule({\n  declarations: [\n    QuillEditorComponent\n  ],\n  exports: [QuillEditorComponent],\n  imports: [],\n  providers: [\n    {\n      provide: QUILL_CONFIG_TOKEN,\n      useValue: { modules: defaultModules }\n    }\n  ]\n})\nexport class QuillModule {\n  static forRoot(config?: QuillConfig): ModuleWithProviders {\n    return {\n      ngModule: QuillModule,\n      providers: [\n        {\n          provide: QUILL_CONFIG_TOKEN,\n          // tslint:disable-next-line:only-arrow-functions\n          useValue: config ||ÃÂ {ÃÂ modules: defaultModules }\n        }\n      ]\n    }\n  }\n}\n"]}